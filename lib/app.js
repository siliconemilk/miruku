// Generated by CoffeeScript 1.4.0
(function() {
  var Character, DialogFactory, Game, GameSession, enableEdit, init, loadMenuDialog, mainMenuDialog;

  Character = (function() {

    function Character(name) {
      this.name = name;
    }

    Character.prototype.strength = 0;

    Character.prototype.toughness = 0;

    Character.prototype.speed = 0;

    Character.prototype.intelligence = 0;

    Character.prototype.health = 0;

    Character.prototype.fatigue = 0;

    Character.prototype.level = 0;

    Character.prototype.experience = 0;

    return Character;

  })();

  Game = (function() {

    function Game(state) {
      this.state = state;
    }

    Game.prototype.importFile = function(filename) {};

    Game.prototype.exportFile = function(filename) {};

    return Game;

  })();

  GameSession = (function() {

    function GameSession() {}

    GameSession.prototype.save = function() {};

    GameSession.prototype.load = function(slot) {};

    GameSession.Player = new Character("Miruku");

    return GameSession;

  })();

  DialogFactory = (function() {

    function DialogFactory() {
      this.dialogs = {};
    }

    DialogFactory.prototype.show = function(dialog_name) {
      if (!this.dialogs[dialog_name].dialog("isOpen")) {
        return this.dialogs[dialog_name].dialog("open");
      } else {
        return console.log("already open");
      }
    };

    DialogFactory.prototype.register = function(name, dialog) {
      return this.dialogs[name] = dialog;
    };

    return DialogFactory;

  })();

  mainMenuDialog = function() {
    var DialogConstruct, NewDialog;
    DialogConstruct = "<div id=\"MenuDialog\">\n	<div class=\"menu-content\">\n		<button id=\"start-game\" class=\"draggable-element\">Start Game</button><br/>\n		<button id=\"options\">Options</button><br/>\n		<button id=\"how-to\">How-To</button>\n	</div>\n</div>";
    NewDialog = $(DialogConstruct);
    NewDialog.dialog({
      height: '240',
      width: '320',
      modal: true,
      resizable: false,
      closeOnEscape: false,
      autoOpen: false,
      title: 'Miruku Menu'
    });
    $("#start-game").on('click', function(event) {
      if ($(this).hasClass('noclick')) {
        return $(this).removeClass('noclick');
      } else {
        return NewDialog.dialog("close");
      }
    });
    return NewDialog;
  };

  loadMenuDialog = function() {
    return DialogConstruct;
  };

  $(function() {
    init();
    window.dialogFactory = new DialogFactory();
    window.dialogFactory.register("mainMenu", mainMenuDialog());
    window.dialogFactory.show("mainMenu");
    return $("#clickme").on('click', function(event) {
      return enableEdit();
    });
  });

  enableEdit = function() {
    var item, _i, _len, _ref;
    _ref = document.body.getElementsByTagName("*");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if ($(item).hasClass('draggable-element')) {
        $(item).draggable({
          cancel: false,
          grid: [10, 10],
          start: function(event, ui) {
            $(this).addClass('noclick');
          }
        });
      }
    }
    return window.dialogFactory.show("mainMenu");
  };

  init = function() {
    var item, _i, _len, _ref, _results;
    _ref = document.body.getElementsByTagName("*");
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if ($(item).hasClass('draggable-element')) {
        _results.push($(item).draggable({
          disabled: true,
          grid: [10, 10]
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
