// Generated by CoffeeScript 1.4.0
(function() {
  var Character, DialogFactory, Game, GameSession, alignToolWithTarget, deinitEdit, disableEdit, disableSubmitOnClick, editMenuDialog, enableEdit, followOnDrag, initEdit, mainMenuDialog;

  disableSubmitOnClick = function(event, ui) {
    $(this).addClass('noclick');
  };

  followOnDrag = function(event, ui) {
    var offset, width;
    width = $(this).outerWidth();
    offset = {};
    offset.left = width + ui.offset.left;
    offset.top = ui.offset.top;
    return $(this).next().offset(offset);
  };

  alignToolWithTarget = function(target) {
    var editable, hidden, offset, parent, width, _i, _len, _ref;
    parent = $(target).parent();
    hidden = $(parent).is(":hidden");
    if (hidden) {
      $(parent).show();
    }
    _ref = $(target).find('.editable');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      editable = _ref[_i];
      width = $(editable).outerWidth();
      offset = {};
      offset.left = width + $(editable).offset().left;
      offset.top = $(editable).offset().top;
      $(editable).next().offset(offset);
    }
    if (hidden && (parent != null)) {
      return $(parent).hide();
    }
  };

  initEdit = function() {
    var editButton;
    window.editing = true;
    $(document).on('dialogopen', function(event, ui) {
      return alignToolWithTarget(event.target);
    });
    $(document).on('dialogbeforeopen', function(event, ui) {
      return enableEdit(event.target);
    });
    $(document).on('click', '.tool', function() {
      return window.dialogFactory.show("editMenu");
    });
    enableEdit(document);
    editButton = $("#clickme");
    editButton.text("DISABLE EDITING");
    return editButton.one("click", function() {
      return deinitEdit();
    });
  };

  deinitEdit = function() {
    var editButton;
    window.editing = false;
    disableEdit(document);
    $(document).off('dialogopen');
    $(document).off("click", ".tool");
    editButton = $("#clickme");
    editButton.text("ENABLE EDITING");
    return editButton.one("click", function() {
      return initEdit();
    });
  };

  enableEdit = function(target) {
    var tool;
    if (window.editing && !$(target).find('.editable').is('.editing')) {
      $(target).find('.editable').after('<button class="tool"></button>');
      tool = $('.tool');
      tool.button({
        text: false,
        icons: {
          primary: "ui-icon-wrench"
        }
      });
      alignToolWithTarget(target);
      $(target).find('.editable.draggable-element').draggable({
        cancel: false,
        grid: [10, 10],
        start: disableSubmitOnClick,
        drag: followOnDrag
      });
      return $(target).find('.editable').addClass("editing");
    }
  };

  disableEdit = function(target) {
    if (!window.editing && $(target).find('.editable').is('.editing')) {
      $('.tool').remove();
      $('.editable.ui-draggable').draggable("destroy");
      return $('.editable').removeClass("editing");
    }
  };

  Character = (function() {

    function Character(name) {
      this.name = name;
    }

    Character.prototype.strength = 0;

    Character.prototype.toughness = 0;

    Character.prototype.speed = 0;

    Character.prototype.intelligence = 0;

    Character.prototype.health = 0;

    Character.prototype.fatigue = 0;

    Character.prototype.level = 0;

    Character.prototype.experience = 0;

    return Character;

  })();

  Game = (function() {

    function Game(state) {
      this.state = state;
    }

    Game.prototype.importFile = function(filename) {};

    Game.prototype.exportFile = function(filename) {};

    return Game;

  })();

  GameSession = (function() {

    function GameSession() {}

    GameSession.prototype.save = function() {};

    GameSession.prototype.load = function(slot) {};

    GameSession.Player = new Character("Miruku");

    return GameSession;

  })();

  DialogFactory = (function() {

    function DialogFactory() {
      this.dialogs = {};
    }

    DialogFactory.prototype.show = function(dialog_name) {
      if (!(this.dialogs[dialog_name] != null)) {
        this.register(dialog_name, mainMenuDialog());
      }
      if (!this.dialogs[dialog_name].dialog("isOpen")) {
        return this.dialogs[dialog_name].dialog("open");
      } else {
        return console.log("already open");
      }
    };

    DialogFactory.prototype.register = function(name, dialog) {
      return this.dialogs[name] = dialog;
    };

    DialogFactory.prototype.unregister = function(name) {
      return this.dialogs.splice($.inArray(name, this.dialogs), 1);
    };

    return DialogFactory;

  })();

  mainMenuDialog = function() {
    var DialogConstruct, NewDialog;
    DialogConstruct = "<div id=\"MenuDialog\">\n    <div class=\"menu-content\">\n        <div class=\"absCenter\">\n            <button id=\"start-game\" class=\"draggable-element editable\">Start Game</button>\n            <button id=\"options\" class=\"draggable-element editable\">Options</button>\n            <button id=\"how-to\" class=\"draggable-element editable\">How-To</button>\n        </div>\n    </div>\n</div>";
    NewDialog = $(DialogConstruct);
    NewDialog.dialog({
      height: '240',
      width: '320',
      modal: true,
      closeOnEscape: false,
      autoOpen: false,
      title: 'Miruku Menu'
    });
    $('.absCenter > :button').filter('.editable').button();
    $("#start-game").on('click', function(event) {
      if ($(this).hasClass('noclick')) {
        return $(this).removeClass('noclick');
      } else {
        return NewDialog.dialog("close");
      }
    });
    return NewDialog;
  };

  editMenuDialog = function() {
    var DialogConstruct, NewDialog;
    DialogConstruct = "<div id=\"EditDialog\">\n    <div class=\"menu-content\">\n        <div class=\"absCenter\">\n            <button id=\"one\">One</button>\n            <button id=\"two\">Two</button>\n            <button id=\"three\">Three</button>\n        </div>\n    </div>\n</div>";
    NewDialog = $(DialogConstruct);
    NewDialog.dialog({
      height: '180',
      width: '180',
      modal: false,
      resizable: false,
      closeOnEscape: true,
      autoOpen: false,
      title: 'Edit Menu'
    });
    $('.absCenter > :button').filter('.editable').button();
    return NewDialog;
  };

  (function ($) {
    $.ui.dialog.prototype.open = function (event){ 
        var that = this;
        if(false === this._trigger('beforeOpen', event)){
            return;
        }
        if ( this._isOpen ) {
            if ( this._moveToTop() ) {
                this._focusTabbable();
            }
            return;
        }
            
        this._isOpen = true;
        this.opener = $( this.document[0].activeElement );

        this._size();
        this._position();
        this._createOverlay();
        this._moveToTop( null, true );
        this._show( this.uiDialog, this.options.show, function() {
            that._focusTabbable();
            that._trigger("focus");
        });

        this._trigger("open");
        }
})(jQuery);;


  $(function() {
    window.dialogFactory = new DialogFactory();
    window.dialogFactory.register("editMenu", editMenuDialog());
    $("#clickme").one("click", function() {
      return initEdit();
    });
    $("#showMenu").on("click", function() {
      return window.dialogFactory.show("mainMenu");
    });
    return $('#derp').button();
  });

}).call(this);
